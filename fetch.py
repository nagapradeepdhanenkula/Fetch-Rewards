# -*- coding: utf-8 -*-
"""Fetch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v6dDhMwMo5bjWJTuCSVaEn25jmxpejzY

### **Read Messages from SQS**
"""


import boto3
import hashlib
import json
import psycopg2
import time
import logging
from datetime import datetime
from psycopg2.extras import execute_values

class SQSClient:
    def __init__(self, queue_url, endpoint_url, region_name, aws_access_key_id, aws_secret_access_key):
        self.client = boto3.client("sqs", endpoint_url=endpoint_url, region_name=region_name, aws_access_key_id=aws_access_key_id, aws_secret_access_key=aws_secret_access_key)
        self.queue_url = queue_url

    def retrieve_messages(self):
        messages = self.client.receive_message(QueueUrl=self.queue_url, MaxNumberOfMessages=10, WaitTimeSeconds=10)
        return messages.get('Messages', [])

    def delete_message(self, receipt_handle):
        self.client.delete_message(QueueUrl=self.queue_url, ReceiptHandle=receipt_handle)

"""### **Message Validation and PII Masking**

"""

class MessageProcessor:
    REQUIRED_KEYS = ["user_id", "app_version", "device_type", "ip", "locale", "device_id"]
    NULLABLE_KEYS = ["locale"]

    @staticmethod
    def validate_message(data):
        for key in MessageProcessor.REQUIRED_KEYS:
            if key not in data or (key not in MessageProcessor.NULLABLE_KEYS and not data[key]):
                logging.info("Invalid message: %s \nField: %s is missing or null", data, key)
                return False
        return True

    @staticmethod
    def mask_pii(data):
        data["device_id"] = hashlib.sha256(data["device_id"].encode()).hexdigest()
        data["ip"] = hashlib.sha256(data["ip"].encode()).hexdigest()
        return data

    @staticmethod
    def transform_app_version(app_version):
        parts = [int(x) for x in app_version.split('.')]
        return sum(part * (100 ** i) for i, part in enumerate(reversed(parts)))

"""### **PostgreSQL Interaction**"""

class PostgresClient:
    def __init__(self, host, database, user, password, port):
        self.conn = psycopg2.connect(host=host, database=database, user=user, password=password, port=port)

    def insert_data(self, data):
        insert_query = """
        INSERT INTO user_logins (user_id, device_type, masked_ip, masked_device_id, locale, app_version, create_date)
        VALUES %s
        """
        values = [(d["user_id"], d["device_type"], d["ip"], d["device_id"], d["locale"], MessageProcessor.transform_app_version(d["app_version"]), datetime.now().date()) for d in data]

        with self.conn.cursor() as cursor:
            execute_values(cursor, insert_query, values)
            self.conn.commit()

    def close(self):
        self.conn.close()

"""### **ETL Process**"""

class ETLProcess:
    def __init__(self, sqs_client, postgres_client):
        self.sqs_client = sqs_client
        self.postgres_client = postgres_client

    def run(self):
        while True:
            messages = self.sqs_client.retrieve_messages()

            if not messages:
                logging.info("No new messages. Sleeping for 5 seconds...")
                time.sleep(5)
                continue

            valid_data = []
            for message in messages:
                receipt_handle = message['ReceiptHandle']
                data = json.loads(message['Body'])

                if MessageProcessor.validate_message(data):
                    masked_data = MessageProcessor.mask_pii(data)
                    valid_data.append(masked_data)
                    logging.info("Processed message: %s", masked_data)
                else:
                    self.sqs_client.delete_message(receipt_handle)
                    logging.info("Deleted invalid message: %s", data)

            if valid_data:
                try:
                    self.postgres_client.insert_data(valid_data)
                    for message in messages:
                        self.sqs_client.delete_message(message['ReceiptHandle'])
                    logging.info("Inserted data into PostgreSQL and deleted messages from SQS.")
                except Exception as e:
                    logging.error("Error inserting data into PostgreSQL: %s", e)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(asctime)-15s %(levelname)-8s %(message)s")

    sqs_client = SQSClient(
        queue_url="http://localhost:4566/000000000000/login-queue",
        endpoint_url="http://localhost:4566",
        region_name="us-east-1",
        aws_access_key_id="test",
        aws_secret_access_key="test"
    )

    postgres_client = PostgresClient(
    host="pg-2aa358ee-harshp-c41f.a.aivencloud.com",
    database="defaultdb",
    user="avnadmin",
    password="AVNS_94xF_T_jeI5GBcMA7fg",
    port=13002
    )


    etl_process = ETLProcess(sqs_client, postgres_client)
    etl_process.run()